pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
    app: fastapi-builder
spec:
  serviceAccountName: jenkins-admin
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    args:
    - \$(JENKINS_SECRET)
    - \$(JENKINS_NAME)
  
  - name: docker
    image: docker:24
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  
  - name: kubectl
    image: bitnami/kubectl:latest
    command:
    - cat
    tty: true
  
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
'''
            defaultContainer 'jnlp'
        }
    }
    
    environment {
        APP_NAME = "fastapi-app"
        IMAGE_TAG = "v${BUILD_NUMBER}"
        NAMESPACE = "devops-tools"
        SERVICE_PORT = "32100"
        DOCKER_IMAGE = "${APP_NAME}:${IMAGE_TAG}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "🔄 Checking out code"
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    echo "🐳 Building: ${DOCKER_IMAGE}"
                    sh """
                        cd kube-jenkins-deploy
                        docker build -t ${DOCKER_IMAGE} -f cicd/Dockerfile .
                        docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        echo "☸️ Deploying to Kubernetes..."
                        
                        // 디버깅 정보
                        sh """
                            cd kube-jenkins-deploy
                            pwd
                            ls -la cicd/
                        """
                        
                        // kubectl 연결 테스트
                        sh "kubectl version --client"
                        sh "kubectl get nodes"
                        
                        // 배포
                        sh """
                            cd kube-jenkins-deploy
                            
                            sed -e 's|IMAGE_NAME_PLACEHOLDER|${DOCKER_IMAGE}|g' \
                                -e 's|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g' \
                                -e 's|VERSION_PLACEHOLDER|${IMAGE_TAG}|g' \
                                -e 's|BUILD_PLACEHOLDER|${BUILD_NUMBER}|g' \
                                cicd/deployment.yaml > /tmp/deployment-final.yaml
                            
                            echo "=== Deployment YAML Preview ==="
                            head -30 /tmp/deployment-final.yaml
                            
                            echo "=== Applying to Kubernetes ==="
                            kubectl apply -f /tmp/deployment-final.yaml --timeout=30s
                            
                            echo "=== Verifying ==="
                            kubectl get deployment ${APP_NAME} -n ${NAMESPACE}
                        """
                        
                        echo "✅ Deployed"
                    }
                }
            }
        }
        
        stage('Wait for Rollout') {
            steps {
                container('kubectl') {
                    echo "⏳ Waiting..."
                    sh "kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE} --timeout=120s"
                }
            }
        }
        
        stage('Verify') {
            steps {
                container('kubectl') {
                    sh """
                        kubectl get deployment ${APP_NAME} -n ${NAMESPACE}
                        kubectl get pods -n ${NAMESPACE} -l app=${APP_NAME}
                        kubectl get svc ${APP_NAME}-service -n ${NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo """
╔═══════════════════════════════════════╗
║      ✅ DEPLOYMENT SUCCESSFUL! ✅      ║
╠═══════════════════════════════════════╣
║  App: ${APP_NAME}
║  Version: ${IMAGE_TAG}
║  
║  🌐 http://localhost:${SERVICE_PORT}/
║  📚 http://localhost:${SERVICE_PORT}/docs
╚═══════════════════════════════════════╝
            """
        }
        failure {
            echo "❌ FAILED"
        }
    }
}